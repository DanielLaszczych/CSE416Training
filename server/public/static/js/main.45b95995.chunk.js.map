{"version":3,"sources":["pages/Home.js","pages/Quiz.js","App.js","ApolloProvider.js","reportWebVitals.js","index.js"],"names":["FETCH_QUIZZES_QUERY","gql","Home","useQuery","loading","error","data","quizzes","getQuizzes","console","log","process","API_URI","marginTop","size","centerContent","marginBottom","fontSize","textDecoration","map","quiz","as","Link","color","to","id","_hover","title","FETCH_QUIZ_QUERY","Quiz","props","quizId","match","params","variables","getQuiz","useState","userAnswers","setUserAnswers","quizDone","setQuizDone","style","display","textAlign","width","className","marginLeft","questions","question","index","answerChoices","choice","borderRadius","padding","margin","minWidth","border","answer","borderStyle","borderColor","onClick","prevAnswers","newAnswers","updateUserAnswers","background","cursor","isDisabled","colorScheme","App","exact","path","component","httpLink","createHttpLink","uri","client","ApolloClient","link","cache","InMemoryCache","ApolloProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"0RAiEA,I,EAAMA,EAAsBC,YAAH,sFASVC,EA/Df,WACE,MAIIC,YAASH,GAHXI,EADF,EACEA,QACAC,EAFF,EAEEA,MAFF,IAGEC,KAAoBC,GAHtB,aAGkC,GAHlC,GAGUC,WAGV,OAAIJ,GACFK,QAAQC,IAAIC,mIAAYC,SAEtB,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAASC,UAAU,OAAOC,KAAK,YAMnCT,EAEA,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAASQ,UAAU,OAAOC,KAAK,WAOrC,cAAC,IAAD,UACE,8BACE,eAAC,IAAD,CAAWC,eAAa,EAAxB,UACE,cAAC,IAAD,CAAKC,aAAa,OAAOC,SAAS,OAAOC,eAAe,YAAxD,qBAGCX,EAAQY,KAAI,SAACC,GAAD,OACX,cAAC,IAAD,CACEC,GAAIC,IACJC,MAAM,QACNN,SAAS,OACTC,eAAe,OAEfM,GAAE,gBAAWJ,EAAKK,IAClBC,OAAQ,CAAEH,MAAO,UAPnB,SASGH,EAAKO,OAJDP,EAAKK,e,+BCmHxB,IAAMG,EAAmB3B,YAAH,0NAeP4B,EAzKf,SAAcC,GACZ,IAAMC,EAASD,EAAME,MAAMC,OAAOF,OAElC,EAII5B,YAASyB,EAAkB,CAC7BM,UAAW,CACTH,YALF3B,EADF,EACEA,QACAC,EAFF,EAEEA,MAFF,IAGEC,KAAiBc,GAHnB,aAG4B,GAH5B,GAGUe,QAOV,EAAsCC,oBAAS,iBAAM,MAArD,mBAAOC,EAAP,KAAoBC,EAApB,KAEA,EAAgCF,oBAAS,kBAAM,KAA/C,mBAAOG,EAAP,KAAiBC,EAAjB,KAUA,OAAIpC,EAEA,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAASS,UAAU,OAAOC,KAAK,WAMnCT,EACI,UAAN,OAAiBA,GAIjB,cAAC,IAAD,UACE,eAAC,IAAD,WACE,sBAAKoC,MAAO,CAAEC,QAAS,OAAQzB,SAAU,QAAzC,UACE,qBAAKwB,MAAO,CAAEE,UAAW,OAAQC,MAAO,aAAxC,SACE,cAAC,IAAD,CACEC,UAAU,WACVJ,MAAO,CAAExB,SAAU,OAAQ6B,WAAY,QACvCtB,GAAG,IAHL,oBAQF,qBACEiB,MAAO,CACLE,UAAW,SACXC,MAAO,YACP3B,SAAU,OACVC,eAAgB,aALpB,SAQGE,EAAKO,WAGTP,EAAK2B,UAAU5B,KAAI,SAAC6B,EAAUC,GAAX,OAClB,eAAC,IAAD,WACE,cAAC,IAAD,CACEN,UAAU,SACV1B,SAAS,OACTJ,UAAU,OACVG,aAAa,OAJf,SAMGgC,EAASA,WAEZ,cAAC,IAAD,CAAWjC,eAAa,EAAxB,SACGiC,EAASE,cAAc/B,KAAI,SAACgC,GAAD,OAC1B,cAAC,IAAD,CAEEC,aAAa,MACbC,QAAQ,MACRC,OAAO,MACPrC,SAAS,OACTsC,SAAS,OACTC,OAAQ,WACN,OACEjB,GACAF,EAAYY,KAAWE,GACvBA,IAAWH,EAASS,OAEb,MAEA,OAGXC,YAAY,QACZC,YAAa,WACX,OACEpB,GACAF,EAAYY,KAAWE,GACvBA,IAAWH,EAASS,OAEb,UAEA,SAGXG,QAAS,WACFrB,GAzFvB,SAA2BU,EAAOE,GAChCb,GAAe,SAACuB,GACd,IAAMC,EAAU,YAAOD,GAEvB,OADAC,EAAWb,GAASE,EACbW,KAsFSC,CAAkBd,EAAOE,IAG7Ba,WAAY,WACV,OAAI3B,EAAYY,KAAWE,EACrBZ,GAAYF,EAAYY,KAAWD,EAASS,OACvC,UAEA,aAGF,eAGX/B,OAAQ,WACN,IAAKa,EACH,OAAIF,EAAYY,KAAWE,EAClB,CAAEa,WAAY,aAAcC,OAAQ,WAEpC,CAAED,WAAY,YAAaC,OAAQ,YAnDlD,SAwDGd,GAvDIH,EAASvB,GAAK0B,UAZjBH,EAASvB,OAyErB,cAAC,IAAD,UACE,cAAC,IAAD,CACEyC,WAAY3B,EACZqB,QAAS,kBAAMpB,GAAY,IAC3B3B,UAAU,OACVsD,YAAY,QACZrD,KAAK,KACLE,aAAa,OANf,SAQGuB,EAAW,YAAc,2BChJvB6B,MATf,WACE,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWrE,IACjC,cAAC,IAAD,CAAOmE,OAAK,EAACC,KAAK,gBAAgBC,UAAW1C,Q,oCCD7C2C,EAAWC,YAAe,CAC9BC,IAAK/D,mIAAYC,SAAW,kCAGxB+D,EAAS,IAAIC,IAAa,CAC9BC,KAAML,EACNM,MAAO,IAAIC,MAIX,gBAACC,EAAA,EAAD,CAAgBL,OAAQA,EAAxB,SACE,cAAC,EAAD,MCRWM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OAAOX,EAAgBY,SAASC,eAAe,SAKxDZ,M","file":"static/js/main.45b95995.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport {\r\n  Center,\r\n  Container,\r\n  Box,\r\n  Spinner,\r\n  ChakraProvider,\r\n} from '@chakra-ui/react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Home() {\r\n  const {\r\n    loading,\r\n    error,\r\n    data: { getQuizzes: quizzes } = {},\r\n  } = useQuery(FETCH_QUIZZES_QUERY);\r\n\r\n  if (loading) {\r\n    console.log(process.env.API_URI);\r\n    return (\r\n      <ChakraProvider>\r\n        <Center>\r\n          <Spinner marginTop='50px' size='xl' />\r\n        </Center>\r\n      </ChakraProvider>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <ChakraProvider>\r\n        <Center>\r\n          <Spinner marginTop='50px' size='xl' />\r\n        </Center>\r\n      </ChakraProvider>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <ChakraProvider>\r\n      <div>\r\n        <Container centerContent>\r\n          <Box marginBottom='40px' fontSize='80px' textDecoration='underline'>\r\n            Quizzes\r\n          </Box>\r\n          {quizzes.map((quiz) => (\r\n            <Center\r\n              as={Link}\r\n              color='black'\r\n              fontSize='50px'\r\n              textDecoration='none'\r\n              key={quiz.id}\r\n              to={`/quiz/${quiz.id}`}\r\n              _hover={{ color: 'purple' }}\r\n            >\r\n              {quiz.title}\r\n            </Center>\r\n          ))}\r\n        </Container>\r\n      </div>\r\n    </ChakraProvider>\r\n  );\r\n}\r\n\r\nconst FETCH_QUIZZES_QUERY = gql`\r\n  {\r\n    getQuizzes {\r\n      id\r\n      title\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Home;\r\n","import React, { useState } from 'react';\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport {\r\n  Center,\r\n  Box,\r\n  Container,\r\n  Button as BetterButton,\r\n  ChakraProvider,\r\n  Spinner,\r\n} from '@chakra-ui/react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Quiz.css';\r\n\r\nfunction Quiz(props) {\r\n  const quizId = props.match.params.quizId;\r\n\r\n  const {\r\n    loading,\r\n    error,\r\n    data: { getQuiz: quiz } = {},\r\n  } = useQuery(FETCH_QUIZ_QUERY, {\r\n    variables: {\r\n      quizId,\r\n    },\r\n  });\r\n\r\n  const [userAnswers, setUserAnswers] = useState(() => []);\r\n\r\n  const [quizDone, setQuizDone] = useState(() => false);\r\n\r\n  function updateUserAnswers(index, choice) {\r\n    setUserAnswers((prevAnswers) => {\r\n      const newAnswers = [...prevAnswers];\r\n      newAnswers[index] = choice;\r\n      return newAnswers;\r\n    });\r\n  }\r\n\r\n  if (loading) {\r\n    return (\r\n      <ChakraProvider>\r\n        <Center>\r\n          <Spinner marginTop='50px' size='xl' />\r\n        </Center>\r\n      </ChakraProvider>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return `Error! ${error}`;\r\n  }\r\n\r\n  return (\r\n    <ChakraProvider>\r\n      <Box>\r\n        <div style={{ display: 'flex', fontSize: '20px' }}>\r\n          <div style={{ textAlign: 'left', width: '33.33333%' }}>\r\n            <Link\r\n              className='homeLink'\r\n              style={{ fontSize: '30px', marginLeft: '10px' }}\r\n              to='/'\r\n            >\r\n              Home\r\n            </Link>\r\n          </div>\r\n          <div\r\n            style={{\r\n              textAlign: 'center',\r\n              width: '33.33333%',\r\n              fontSize: '50px',\r\n              textDecoration: 'underline',\r\n            }}\r\n          >\r\n            {quiz.title}\r\n          </div>\r\n        </div>\r\n        {quiz.questions.map((question, index) => (\r\n          <Box key={question.id}>\r\n            <Center\r\n              textAlign='center'\r\n              fontSize='30px'\r\n              marginTop='20px'\r\n              marginBottom='20px'\r\n            >\r\n              {question.question}\r\n            </Center>\r\n            <Container centerContent>\r\n              {question.answerChoices.map((choice) => (\r\n                <Center\r\n                  key={question.id + choice}\r\n                  borderRadius='8px'\r\n                  padding='5px'\r\n                  margin='5px'\r\n                  fontSize='30px'\r\n                  minWidth='100%'\r\n                  border={() => {\r\n                    if (\r\n                      quizDone &&\r\n                      userAnswers[index] !== choice &&\r\n                      choice === question.answer\r\n                    ) {\r\n                      return '5px';\r\n                    } else {\r\n                      return '1px';\r\n                    }\r\n                  }}\r\n                  borderStyle='solid'\r\n                  borderColor={() => {\r\n                    if (\r\n                      quizDone &&\r\n                      userAnswers[index] !== choice &&\r\n                      choice === question.answer\r\n                    ) {\r\n                      return '#00bd00';\r\n                    } else {\r\n                      return 'black';\r\n                    }\r\n                  }}\r\n                  onClick={() => {\r\n                    if (!quizDone) {\r\n                      updateUserAnswers(index, choice);\r\n                    }\r\n                  }}\r\n                  background={() => {\r\n                    if (userAnswers[index] === choice) {\r\n                      if (quizDone && userAnswers[index] !== question.answer) {\r\n                        return '#ff4646';\r\n                      } else {\r\n                        return 'lightgreen';\r\n                      }\r\n                    } else {\r\n                      return 'transparent';\r\n                    }\r\n                  }}\r\n                  _hover={() => {\r\n                    if (!quizDone) {\r\n                      if (userAnswers[index] === choice) {\r\n                        return { background: 'lightgreen', cursor: 'pointer' };\r\n                      } else {\r\n                        return { background: 'lightgray', cursor: 'pointer' };\r\n                      }\r\n                    }\r\n                  }}\r\n                >\r\n                  {choice}\r\n                </Center>\r\n              ))}\r\n            </Container>\r\n          </Box>\r\n        ))}\r\n        <Center>\r\n          <BetterButton\r\n            isDisabled={quizDone}\r\n            onClick={() => setQuizDone(true)}\r\n            marginTop='50px'\r\n            colorScheme='green'\r\n            size='lg'\r\n            marginBottom='50px'\r\n          >\r\n            {quizDone ? 'Submitted' : 'Submit Answers'}\r\n          </BetterButton>\r\n        </Center>\r\n      </Box>\r\n    </ChakraProvider>\r\n  );\r\n}\r\n\r\nconst FETCH_QUIZ_QUERY = gql`\r\n  query ($quizId: ID!) {\r\n    getQuiz(quizId: $quizId) {\r\n      id\r\n      title\r\n      questions {\r\n        id\r\n        question\r\n        answer\r\n        answerChoices\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Quiz;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport './App.css';\r\nimport Home from './pages/Home';\r\nimport Quiz from './pages/Quiz';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Route exact path='/' component={Home} />\r\n      <Route exact path='/quiz/:quizId' component={Quiz} />\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport App from './App';\r\nimport {\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  createHttpLink,\r\n  ApolloProvider,\r\n} from '@apollo/client';\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: process.env.API_URI || 'http://localhost:5000/graphql',\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: httpLink,\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nexport default (\r\n  <ApolloProvider client={client}>\r\n    <App />\r\n  </ApolloProvider>\r\n);\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import ReactDOM from 'react-dom';\r\nimport ApolloProvider from './ApolloProvider';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(ApolloProvider, document.getElementById('root'));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}